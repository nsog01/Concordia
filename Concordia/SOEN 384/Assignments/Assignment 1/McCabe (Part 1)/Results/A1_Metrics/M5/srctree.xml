<?xml version="1.0" encoding="ISO-8859-15" standalone="no"?>

<program programid="M5" name="M5" datetext="10/06/15" timestamp="2015-10-06T17:28:07-04:00" partial="false" asl="false">
   <srcdir srcdirid="1" name="">
      <srcfile srcfileid="1" name="CompilerError.java">
         <module moduleid="87" name="CompilerError.CompilerError(java.io.File,int,int,java.lang.String,boolean)"/>
                  <module moduleid="58" name="CompilerError.CompilerError(java.io.File,java.lang.String,boolean)"/>
                  <module moduleid="2" name="CompilerError.CompilerError(java.lang.String,boolean)"/>
                  <module moduleid="122" name="CompilerError.hasNoLocation()"/>
                  <module moduleid="73" name="CompilerError.toString()"/>
                  <module moduleid="123" name="CompilerError.file()"/>
                  <module moduleid="104" name="CompilerError.fileName()"/>
                  <module moduleid="95" name="CompilerError.lineNumber()"/>
                  <module moduleid="96" name="CompilerError.startColumn()"/>
                  <module moduleid="6" name="CompilerError.message()"/>
                  <module moduleid="4" name="CompilerError.getFileMessage()"/>
                  <module moduleid="5" name="CompilerError.getLineMessage()"/>
                  <module moduleid="88" name="CompilerError.isWarning()"/>
                  <module moduleid="3" name="CompilerError.compareTo(java.lang.Object)"/>
                  <module moduleid="60" name="CompilerError.compareByPosition(CompilerError)"/>
               </srcfile>
      <srcfile srcfileid="2" name="CompilerErrorModel.java">
         <module moduleid="52" name="edu.rice.cs.drjava.model.compiler.CompilerErrorModel.__Anon_001_.getDocumentForFile(java.io.File)"/>
                  <module moduleid="57" name="edu.rice.cs.drjava.model.compiler.CompilerErrorModel.__Anon_001_.isAlreadyOpen(java.io.File)"/>
                  <module moduleid="54" name="edu.rice.cs.drjava.model.compiler.CompilerErrorModel.__Anon_001_.getOpenDefinitionsDocuments()"/>
                  <module moduleid="55" name="edu.rice.cs.drjava.model.compiler.CompilerErrorModel.__Anon_001_.hasModifiedDocuments()"/>
                  <module moduleid="56" name="edu.rice.cs.drjava.model.compiler.CompilerErrorModel.__Anon_001_.hasUntitledDocuments()"/>
                  <module moduleid="53" name="edu.rice.cs.drjava.model.compiler.CompilerErrorModel.__Anon_001_.getFileGroupingState()"/>
                  <module moduleid="7" name="CompilerErrorModel.CompilerErrorModel()"/>
                  <module moduleid="8" name="CompilerErrorModel.CompilerErrorModel(CompilerError[],edu.rice.cs.drjava.model.IGetDocuments)"/>
                  <module moduleid="9" name="CompilerErrorModel.getError(int)"/>
                  <module moduleid="14" name="CompilerErrorModel.getPosition(CompilerError)"/>
                  <module moduleid="12" name="CompilerErrorModel.getNumErrors()"/>
                  <module moduleid="11" name="CompilerErrorModel.getNumCompErrors()"/>
                  <module moduleid="13" name="CompilerErrorModel.getNumWarnings()"/>
                  <module moduleid="17" name="CompilerErrorModel.toString()"/>
                  <module moduleid="10" name="CompilerErrorModel.getErrorAtOffset(edu.rice.cs.drjava.model.OpenDefinitionsDocument,int)"/>
                  <module moduleid="15" name="CompilerErrorModel.hasErrorsWithPositions(edu.rice.cs.drjava.model.OpenDefinitionsDocument)"/>
                  <module moduleid="16" name="CompilerErrorModel.hasOnlyWarnings()"/>
                  <module moduleid="63" name="CompilerErrorModel._calculatePositions()"/>
                  <module moduleid="89" name="CompilerErrorModel.nextErrorWithLine(int)"/>
                  <module moduleid="100" name="CompilerErrorModel.StartAndEndIndex.StartAndEndIndex(int,int)"/>
                  <module moduleid="66" name="CompilerErrorModel.StartAndEndIndex.getStartPos()"/>
                  <module moduleid="67" name="CompilerErrorModel.StartAndEndIndex.getEndPos()"/>
               </srcfile>
      <srcfile srcfileid="3" name="CompilerProxy.java">
         <module moduleid="18" name="CompilerProxy.CompilerProxy(java.lang.String,java.lang.ClassLoader)"/>
                  <module moduleid="75" name="CompilerProxy._recreateCompiler()"/>
                  <module moduleid="20" name="CompilerProxy.compile(java.io.File,java.io.File[])"/>
                  <module moduleid="21" name="CompilerProxy.compile(java.io.File[],java.io.File[])"/>
                  <module moduleid="125" name="CompilerProxy.isAvailable()"/>
                  <module moduleid="117" name="CompilerProxy.getName()"/>
                  <module moduleid="27" name="CompilerProxy.toString()"/>
                  <module moduleid="25" name="CompilerProxy.setExtraClassPath(java.lang.String)"/>
                  <module moduleid="24" name="CompilerProxy.setExtraClassPath(ClasspathVector)"/>
                  <module moduleid="22" name="CompilerProxy.setAllowAssertions(boolean)"/>
                  <module moduleid="26" name="CompilerProxy.setWarningsEnabled(boolean)"/>
                  <module moduleid="19" name="CompilerProxy.addToBootClassPath(java.io.File)"/>
                  <module moduleid="23" name="CompilerProxy.setBuildDirectory(java.io.File)"/>
               </srcfile>
      <srcfile srcfileid="4" name="CompilerRegistry.java">
         <module moduleid="28" name="CompilerRegistry.CompilerRegistry()"/>
                  <module moduleid="128" name="CompilerRegistry.setBaseClassLoader(java.lang.ClassLoader)"/>
                  <module moduleid="79" name="CompilerRegistry.getBaseClassLoader()"/>
                  <module moduleid="131" name="CompilerRegistry.getAvailableCompilers()"/>
                  <module moduleid="134" name="CompilerRegistry._createCompiler(java.lang.String,java.util.LinkedList)"/>
                  <module moduleid="29" name="CompilerRegistry.isNoCompilerAvailable()"/>
                  <module moduleid="80" name="CompilerRegistry.setActiveCompiler(CompilerInterface)"/>
                  <module moduleid="77" name="CompilerRegistry.getActiveCompiler()"/>
                  <module moduleid="137" name="CompilerRegistry._instantiateCompiler(java.lang.String)"/>
                  <module moduleid="141" name="CompilerRegistry.createCompiler(java.lang.Class)"/>
               </srcfile>
      <srcfile srcfileid="5" name="CompilerRegistryTest.java">
         <module moduleid="30" name="CompilerRegistryTest.CompilerRegistryTest(java.lang.String)"/>
                  <module moduleid="44" name="CompilerRegistryTest.suite()"/>
                  <module moduleid="43" name="CompilerRegistryTest.setUp()"/>
                  <module moduleid="45" name="CompilerRegistryTest.tearDown()"/>
                  <module moduleid="51" name="CompilerRegistryTest.testLimitOneByOne()"/>
                  <module moduleid="50" name="CompilerRegistryTest.testLimitAllAtOnce()"/>
                  <module moduleid="47" name="CompilerRegistryTest.testAvailableCompilerSeenByDrJava()"/>
                  <module moduleid="46" name="CompilerRegistryTest.testActiveCompilerAllAvailable()"/>
                  <module moduleid="85" name="CompilerRegistryTest._getCompilersAfterDisablingOne(int)"/>
                  <module moduleid="121" name="CompilerRegistryTest._getCompilersAfterDisablingSome(int[])"/>
                  <module moduleid="48" name="CompilerRegistryTest.testCannotSetCompilerToNull()"/>
                  <module moduleid="31" name="CompilerRegistryTest.Without.Without()"/>
                  <module moduleid="32" name="CompilerRegistryTest.Without.addToBootClassPath(java.io.File)"/>
                  <module moduleid="34" name="CompilerRegistryTest.Without.compile(java.io.File[],java.io.File[])"/>
                  <module moduleid="33" name="CompilerRegistryTest.Without.compile(java.io.File,java.io.File[])"/>
                  <module moduleid="35" name="CompilerRegistryTest.Without.getName()"/>
                  <module moduleid="36" name="CompilerRegistryTest.Without.isAvailable()"/>
                  <module moduleid="37" name="CompilerRegistryTest.Without.setAllowAssertions(boolean)"/>
                  <module moduleid="41" name="CompilerRegistryTest.Without.setWarningsEnabled(boolean)"/>
                  <module moduleid="40" name="CompilerRegistryTest.Without.setExtraClassPath(java.lang.String)"/>
                  <module moduleid="39" name="CompilerRegistryTest.Without.setExtraClassPath(ClasspathVector)"/>
                  <module moduleid="42" name="CompilerRegistryTest.Without.toString()"/>
                  <module moduleid="38" name="CompilerRegistryTest.Without.setBuildDirectory(java.io.File)"/>
                  <module moduleid="49" name="CompilerRegistryTest.testCreateCompiler()"/>
               </srcfile>
   </srcdir>
</program>
